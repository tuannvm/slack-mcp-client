name: Release Pipeline

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release

      - name: Extract version from git tag
        id: extract_version
        if: steps.semantic.outcome == 'success'
        run: |
          VERSION=$(git describe --tags --abbrev=0 --always)
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"
          # Dynamically set the tag name for use in later steps
          TAG_NAME="v$VERSION"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV

      - name: Validate Git Tag
        run: |
          TAG_NAME=${{ env.TAG_NAME }}
          EXISTING_TAG=$(git tag --points-at ${GITHUB_SHA})
          if [ "$EXISTING_TAG" != "$TAG_NAME" ]; then
            git tag -f $TAG_NAME ${GITHUB_SHA}
            git push origin $TAG_NAME --force
          fi

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: steps.extract_version.outcome == 'success'
        with:
          version: v1.18.2
          distribution: goreleaser
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          GORELEASER_CURRENT_TAG: v${{ steps.extract_version.outputs.version }}

  # Build and publish Docker image with semantic version tags
  publish-docker-image:
    name: Publish Docker Image
    needs: semantic-release
    if: needs.semantic-release.outputs.version != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.semantic-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.semantic-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.semantic-release.outputs.version }}
            latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: "arm64,amd64"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
